<?php

echo "=== Test des Corrections de Timeout - Decode SV ===\n\n";

// Test 1: V√©rification de la configuration des timeouts
echo "1. üïê V√©rification de la configuration des timeouts...\n";

$timeoutConfig = [
    'max_execution_time' => ini_get('max_execution_time'),
    'max_input_time' => ini_get('max_input_time'),
    'memory_limit' => ini_get('memory_limit'),
    'upload_max_filesize' => ini_get('upload_max_filesize'),
    'post_max_size' => ini_get('post_max_size'),
];

foreach ($timeoutConfig as $setting => $value) {
    echo "   üìã $setting: $value\n";
}

// Test 2: V√©rification des fichiers de configuration
echo "\n2. üìÅ V√©rification des fichiers de configuration...\n";

$configFiles = [
    'config/timeout.php' => 'Configuration des timeouts',
    'app/Http/Middleware/SetTimeoutLimits.php' => 'Middleware de timeout',
    'public/.htaccess' => 'Configuration Apache'
];

foreach ($configFiles as $file => $description) {
    if (file_exists($file)) {
        echo "   ‚úÖ $description ($file)\n";
        
        // V√©rifications sp√©cifiques
        if ($file === 'config/timeout.php') {
            $content = file_get_contents($file);
            if (strpos($content, 'file_upload') !== false) {
                echo "      ‚úÖ Configuration file_upload pr√©sente\n";
            }
            if (strpos($content, 'image_processing') !== false) {
                echo "      ‚úÖ Configuration image_processing pr√©sente\n";
            }
        }
        
        if ($file === 'app/Http/Middleware/SetTimeoutLimits.php') {
            $content = file_get_contents($file);
            if (strpos($content, 'set_time_limit') !== false) {
                echo "      ‚úÖ Gestion set_time_limit pr√©sente\n";
            }
            if (strpos($content, 'isFileUploadRequest') !== false) {
                echo "      ‚úÖ D√©tection upload de fichiers pr√©sente\n";
            }
        }
        
        if ($file === 'public/.htaccess') {
            $content = file_get_contents($file);
            if (strpos($content, 'max_execution_time') !== false) {
                echo "      ‚úÖ Configuration PHP dans .htaccess pr√©sente\n";
            }
        }
    } else {
        echo "   ‚ùå $description manquant ($file)\n";
    }
}

// Test 3: Test de simulation de timeout
echo "\n3. ‚è±Ô∏è  Test de simulation de timeout...\n";

function testTimeoutFunction($seconds) {
    $start = microtime(true);
    
    // Simuler une op√©ration qui pourrait prendre du temps
    for ($i = 0; $i < $seconds * 100000; $i++) {
        // Op√©ration simple pour simuler du travail
        $dummy = sqrt($i);
    }
    
    $end = microtime(true);
    return round($end - $start, 2);
}

try {
    // Test avec une op√©ration courte
    $shortTime = testTimeoutFunction(1);
    echo "   ‚úÖ Op√©ration courte (1s simul√©): {$shortTime}s r√©el\n";
    
    // Test avec une op√©ration plus longue
    $mediumTime = testTimeoutFunction(2);
    echo "   ‚úÖ Op√©ration moyenne (2s simul√©): {$mediumTime}s r√©el\n";
    
} catch (Exception $e) {
    echo "   ‚ùå Erreur lors du test de timeout: " . $e->getMessage() . "\n";
}

// Test 4: V√©rification des optimisations Livewire
echo "\n4. ‚ö° V√©rification des optimisations Livewire...\n";

$livewireFiles = [
    'app/Livewire/DocumentsList.php',
    'app/Livewire/DocumentUpload.php'
];

foreach ($livewireFiles as $file) {
    if (file_exists($file)) {
        $content = file_get_contents($file);
        echo "   üìÅ $file:\n";
        
        // V√©rifications sp√©cifiques
        $checks = [
            'set_time_limit' => strpos($content, 'set_time_limit') !== false,
            'cache' => strpos($content, 'cache()') !== false,
            'try-catch' => strpos($content, 'try {') !== false && strpos($content, 'catch') !== false,
            'Log::error' => strpos($content, 'Log::error') !== false || strpos($content, 'Log::warning') !== false
        ];
        
        foreach ($checks as $feature => $present) {
            echo "      " . ($present ? "‚úÖ" : "‚ùå") . " $feature\n";
        }
    } else {
        echo "   ‚ùå Fichier manquant: $file\n";
    }
}

// Test 5: Test de connexion √† la base de donn√©es avec timeout
echo "\n5. üóÑÔ∏è  Test de connexion base de donn√©es avec timeout...\n";

$dbPath = '/home/acer/Bureau/work/project_IA/decode_sv/database/database.sqlite';

try {
    $start = microtime(true);
    
    $pdo = new PDO("sqlite:$dbPath");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $pdo->setAttribute(PDO::ATTR_TIMEOUT, 30); // Timeout de 30 secondes
    
    // Test d'une requ√™te simple
    $stmt = $pdo->query("SELECT COUNT(*) FROM documents");
    $count = $stmt->fetch(PDO::FETCH_COLUMN);
    
    $end = microtime(true);
    $duration = round(($end - $start) * 1000, 2);
    
    echo "   ‚úÖ Connexion DB r√©ussie en {$duration}ms\n";
    echo "   üìä Documents trouv√©s: $count\n";
    
} catch (PDOException $e) {
    echo "   ‚ùå Erreur de base de donn√©es: " . $e->getMessage() . "\n";
}

// Test 6: Test de l'application web
echo "\n6. üåê Test de l'application web...\n";

$testUrls = [
    'http://localhost:8002' => 'Page d\'accueil',
    'http://localhost:8002/documents' => 'Page des documents'
];

foreach ($testUrls as $url => $description) {
    $start = microtime(true);
    
    $context = stream_context_create([
        'http' => [
            'timeout' => 10,
            'method' => 'GET'
        ]
    ]);
    
    $response = @file_get_contents($url, false, $context);
    $end = microtime(true);
    $duration = round(($end - $start) * 1000, 2);
    
    if ($response !== false) {
        echo "   ‚úÖ $description accessible en {$duration}ms\n";
        
        // V√©rifier la taille de la r√©ponse
        $size = strlen($response);
        echo "      üìè Taille de la r√©ponse: " . number_format($size) . " bytes\n";
        
        // V√©rifier si c'est du HTML valide
        if (strpos($response, '<html') !== false || strpos($response, '<!DOCTYPE') !== false) {
            echo "      ‚úÖ HTML valide d√©tect√©\n";
        }
    } else {
        echo "   ‚ùå $description non accessible (timeout ou erreur)\n";
    }
}

// Test 7: Recommandations d'optimisation
echo "\n7. üí° Recommandations d'optimisation...\n";

$recommendations = [
    'Utiliser un serveur web d√©di√© (Apache/Nginx) au lieu du serveur PHP int√©gr√©',
    'Configurer OPcache pour am√©liorer les performances PHP',
    'Utiliser Redis ou Memcached pour le cache',
    'Optimiser les requ√™tes de base de donn√©es avec des index',
    'Compresser les assets CSS/JS',
    'Utiliser un CDN pour les fichiers statiques'
];

foreach ($recommendations as $i => $recommendation) {
    echo "   " . ($i + 1) . ". $recommendation\n";
}

// R√©sum√© final
echo "\n" . str_repeat("=", 60) . "\n";
echo "üéØ R√âSUM√â DES CORRECTIONS DE TIMEOUT\n";
echo str_repeat("=", 60) . "\n";

$score = 0;
$maxScore = 7;

// Calcul du score
if (file_exists('config/timeout.php')) $score++;
if (file_exists('app/Http/Middleware/SetTimeoutLimits.php')) $score++;
if (file_exists('public/.htaccess') && strpos(file_get_contents('public/.htaccess'), 'max_execution_time') !== false) $score++;
if (file_exists('app/Livewire/DocumentsList.php') && strpos(file_get_contents('app/Livewire/DocumentsList.php'), 'set_time_limit') !== false) $score++;
if (file_exists('app/Livewire/DocumentUpload.php') && strpos(file_get_contents('app/Livewire/DocumentUpload.php'), 'set_time_limit') !== false) $score++;

// Test de base de donn√©es
try {
    $pdo = new PDO("sqlite:$dbPath");
    $score++;
} catch (Exception $e) {
    // Pas de point
}

// Test web
$webResponse = @file_get_contents('http://localhost:8002', false, stream_context_create(['http' => ['timeout' => 5]]));
if ($webResponse !== false) $score++;

echo "üìä Score global : $score/$maxScore\n\n";

if ($score >= 6) {
    echo "üéâ EXCELLENT ! Les corrections de timeout sont bien impl√©ment√©es\n";
    echo "‚úÖ Configuration des timeouts optimis√©e\n";
    echo "‚úÖ Middleware de gestion des timeouts actif\n";
    echo "‚úÖ Optimisations Livewire en place\n";
    echo "‚úÖ Application web fonctionnelle\n";
} elseif ($score >= 4) {
    echo "‚ö° BON ! La plupart des corrections sont en place\n";
    echo "‚ö†Ô∏è  Quelques optimisations suppl√©mentaires recommand√©es\n";
} else {
    echo "‚ö†Ô∏è  ATTENTION ! Plusieurs corrections de timeout manquent\n";
    echo "‚ùå Risque de timeouts persistants\n";
}

echo "\nüìã Actions recommand√©es :\n";
echo "1. Red√©marrer le serveur web pour appliquer les changements\n";
echo "2. Tester l'upload de gros fichiers (5-10MB)\n";
echo "3. Tester les filtres avec de nombreux documents\n";
echo "4. Surveiller les logs pour d√©tecter d'√©ventuels timeouts\n";
echo "5. Consid√©rer l'utilisation d'un serveur web d√©di√© en production\n\n";

echo "‚ú® Les corrections de timeout sont maintenant en place !\n";
