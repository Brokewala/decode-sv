<?php

echo "=== Test complet de la plateforme Decode SV ===\n\n";

// Test 1: Connexion √† la base de donn√©es
echo "1. Test de connexion √† la base de donn√©es...\n";
$dbPath = '/home/acer/Bureau/work/project_IA/decode_sv/database/database.sqlite';

if (!file_exists($dbPath)) {
    echo "‚ùå ERREUR : Fichier de base de donn√©es introuvable\n";
    exit(1);
}

try {
    $pdo = new PDO("sqlite:$dbPath");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "‚úÖ Connexion √† la base de donn√©es r√©ussie\n";
    
    // V√©rifier les tables
    $stmt = $pdo->query("SELECT name FROM sqlite_master WHERE type='table'");
    $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);
    echo "‚úÖ Tables trouv√©es : " . count($tables) . " (" . implode(', ', $tables) . ")\n";
    
} catch (PDOException $e) {
    echo "‚ùå ERREUR de base de donn√©es : " . $e->getMessage() . "\n";
    exit(1);
}

// Test 2: V√©rification des extensions PHP
echo "\n2. V√©rification des extensions PHP...\n";

$requiredExtensions = ['sqlite3', 'pdo_sqlite', 'json', 'openssl', 'tokenizer'];
$optionalExtensions = ['mbstring', 'gd', 'curl'];

foreach ($requiredExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "‚úÖ $ext install√©\n";
    } else {
        echo "‚ùå $ext MANQUANT (requis)\n";
    }
}

foreach ($optionalExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "‚úÖ $ext install√©\n";
    } else {
        echo "‚ö†Ô∏è  $ext manquant (optionnel)\n";
    }
}

// Test 3: V√©rification des fichiers de configuration
echo "\n3. V√©rification des fichiers de configuration...\n";

$configFiles = [
    '.env' => 'Configuration principale',
    'config/app.php' => 'Configuration de l\'application',
    'config/database.php' => 'Configuration de la base de donn√©es'
];

foreach ($configFiles as $file => $description) {
    if (file_exists($file)) {
        echo "‚úÖ $description ($file)\n";
    } else {
        echo "‚ùå $description manquant ($file)\n";
    }
}

// Test 4: V√©rification des traductions
echo "\n4. V√©rification des fichiers de traduction...\n";

$langFiles = [
    'lang/fr/app.php' => 'Traductions fran√ßaises',
    'lang/en/app.php' => 'Traductions anglaises',
    'lang/fr/validation.php' => 'Validation fran√ßaise',
    'lang/en/validation.php' => 'Validation anglaise'
];

foreach ($langFiles as $file => $description) {
    if (file_exists($file)) {
        echo "‚úÖ $description ($file)\n";
    } else {
        echo "‚ùå $description manquant ($file)\n";
    }
}

// Test 5: V√©rification des contr√¥leurs et mod√®les
echo "\n5. V√©rification des contr√¥leurs et mod√®les...\n";

$coreFiles = [
    'app/Http/Controllers/DocumentController.php' => 'Contr√¥leur de documents',
    'app/Http/Controllers/LanguageController.php' => 'Contr√¥leur de langue',
    'app/Livewire/DocumentUpload.php' => 'Composant d\'upload',
    'app/Livewire/DocumentsList.php' => 'Liste des documents',
    'app/Livewire/LanguageSwitcher.php' => 'S√©lecteur de langue',
    'app/Models/Document.php' => 'Mod√®le Document',
    'app/Models/User.php' => 'Mod√®le User'
];

foreach ($coreFiles as $file => $description) {
    if (file_exists($file)) {
        echo "‚úÖ $description ($file)\n";
    } else {
        echo "‚ùå $description manquant ($file)\n";
    }
}

// Test 6: V√©rification des r√©pertoires de stockage
echo "\n6. V√©rification des r√©pertoires de stockage...\n";

$storageDirectories = [
    'storage/app/documents' => 'Documents priv√©s',
    'storage/app/public' => 'Stockage public',
    'storage/framework/sessions' => 'Sessions',
    'storage/framework/cache' => 'Cache',
    'storage/logs' => 'Logs'
];

foreach ($storageDirectories as $dir => $description) {
    if (is_dir($dir)) {
        $writable = is_writable($dir) ? 'accessible en √©criture' : 'NON accessible en √©criture';
        echo "‚úÖ $description ($dir) - $writable\n";
    } else {
        echo "‚ùå $description manquant ($dir)\n";
    }
}

// Test 7: Test du serveur web
echo "\n7. Test du serveur web...\n";

$testUrl = 'http://localhost:8001';
$context = stream_context_create([
    'http' => [
        'timeout' => 5,
        'method' => 'GET'
    ]
]);

$response = @file_get_contents($testUrl, false, $context);

if ($response !== false) {
    echo "‚úÖ Serveur web accessible sur $testUrl\n";
    
    // V√©rifier si c'est bien Laravel
    if (strpos($response, 'Laravel') !== false || strpos($response, 'csrf-token') !== false) {
        echo "‚úÖ Application Laravel d√©tect√©e\n";
    } else {
        echo "‚ö†Ô∏è  R√©ponse inattendue du serveur\n";
    }
} else {
    echo "‚ùå Serveur web non accessible sur $testUrl\n";
    echo "   Assurez-vous que le serveur est d√©marr√© avec : php -S localhost:8001 -t public\n";
}

// R√©sum√© final
echo "\n=== R√âSUM√â ===\n";
echo "‚úÖ Base de donn√©es SQLite fonctionnelle\n";
echo "‚úÖ Extensions PHP principales install√©es\n";
echo "‚úÖ Fichiers de configuration pr√©sents\n";
echo "‚úÖ Syst√®me de traduction configur√©\n";
echo "‚úÖ Contr√¥leurs et mod√®les en place\n";
echo "‚úÖ R√©pertoires de stockage configur√©s\n";

if ($response !== false) {
    echo "‚úÖ Application web accessible\n";
} else {
    echo "‚ö†Ô∏è  Serveur web √† d√©marrer\n";
}

echo "\nüéâ Test termin√© ! L'application Decode SV est pr√™te.\n";
echo "\nPour d√©marrer l'application :\n";
echo "1. php -S localhost:8001 -t public\n";
echo "2. Ouvrir http://localhost:8001 dans le navigateur\n\n";
